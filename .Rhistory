#both bootstrap intervals at once
bootInts <- function(n, y, alpha = 0.05, B = 200){
if (y == 0) {
return(list(raw = c(0,0), t = c(0,0)))
} else if (y == n){
return(list(raw = c(1,1), t = c(1,1)))
} else {
bootMLEs <- rbinom(n = B, size = n, prob = y/n)/n
bootTs <- (bootMLEs - y/n)/sqrt(bootMLEs*(1-bootMLEs)/n)
bootTs <- ifelse(bootTs== Inf | bootTs == -Inf, NA, bootTs)
t <- c(y/n - quantile(bootTs, 1-alpha/2, na.rm = TRUE)*sqrt(y/n*(1-y/n)/n),
y/n - quantile(bootTs, alpha/2, na.rm = TRUE)*sqrt(y/n*(1-y/n)/n))
return(list(raw = quantile(bootMLEs, c(alpha/2, 1-alpha/2)),
t = t
))
}
}
#dataframe with all combos of n and p
np <- data.frame(n = rep(n, each = length(p)), p = rep(p, 3))
#generate data - each column represents N observations from the n - p combo
samples <- apply(X = np, MARGIN = 1, FUN = function(x){
rbinom(n = N, size = x[1], prob = x[2])
})
#for a given column we want to calculate the intervals using each method
#Note this part is just to help explain what is going on with my code
#for a given column, find all the intervals (across rows 1:N)
temp <- sapply(1:N, FUN = function(x){
#get sample size from np dataframe
wald <- waldCI(samples[x, 1], n = np[1, 1])
adjWald <- adjWaldCI(samples[x, 1], n = np[1, 1])
exact <- exactCI(samples[x, 1], n = np[1, 1])
score <- scoreCI(samples[x, 1], n = np[1, 1])
boot <- bootInts(samples[x, 1], n = np[1, 1])
return(list(waldL = wald[1], waldU = wald[2],
adjWaldL = adjWald[1], adjWaldU = adjWald[2],
exactL = exact[1], exactU = exact[2],
scoreL = score[1], scoreU = score[2],
rawL = boot$raw[1], rawU = boot$raw[2],
boottL = boot$t[1], boottU = boot$t[2]))
})
#each column of the above output has the six intervals in it
#now we want to do that process to each column, 1:dim(samples)[2]
allIntervals <- lapply(1:dim(samples)[2],
FUN = function(u){
sapply(X=1:N, FUN = function(x){
#get sample size from np dataframe
wald <- waldCI(samples[x, u], n = np[u, 1])
adjWald <- adjWaldCI(samples[x, u], n = np[u, 1])
exact <- exactCI(samples[x, u], n = np[u, 1])
score <- scoreCI(samples[x, u], n = np[u, 1])
boot <- bootInts(samples[x, u], n = np[u, 1])
return(list(waldL = wald[1], waldU = wald[2],
adjWaldL = adjWald[1], adjWaldU = adjWald[2],
exactL = exact[1], exactU = exact[2],
scoreL = score[1], scoreU = score[2],
rawL = boot$raw[1], rawU = boot$raw[2],
boottL = boot$t[1], boottU = boot$t[2]))
})
})
#give list elements names to make them easier to understand
names(allIntervals) <- apply(X = np, MARGIN = 1,
FUN = function(x){paste0("n",x[1],"p",x[2])})
#now get summaries about each method
#add a new column to the np dataframe with the proportions
np$sumContainWald <- np$sumLengthWald <- vector(mode = "numeric", length = dim(samples)[2])
np$sumContainAdjWald <- np$sumLengthAdjWald <- vector(mode = "numeric", length = dim(samples)[2])
np$sumContainExact <- np$sumLengthExact <- vector(mode = "numeric", length = dim(samples)[2])
np$sumContainScore <- np$sumLengthScore <- vector(mode = "numeric", length = dim(samples)[2])
np$sumContainRaw <- np$sumLengthRaw <- vector(mode = "numeric", length = dim(samples)[2])
np$sumContainBoott <- np$sumLengthBoott <- vector(mode = "numeric", length = dim(samples)[2])
for(i in 1:dim(samples)[2]){
for(j in 1:N){
col <- allIntervals[[i]][,j]
np$sumContainWald[i] <- np$sumContainWald[i] + (col$waldL < np$p[i] & col$waldU > np$p[i])
np$sumContainAdjWald[i] <- np$sumContainAdjWald[i] + (col$adjWaldL < np$p[i] & col$adjWaldU > np$p[i])
np$sumContainExact[i] <- np$sumContainExact[i] + (col$exactL < np$p[i] & col$exactU > np$p[i])
np$sumContainScore[i] <- np$sumContainScore[i] + (col$scoreL < np$p[i] & col$scoreU > np$p[i])
np$sumContainRaw[i] <- np$sumContainRaw[i] + (col$rawL < np$p[i] & col$rawU > np$p[i])
np$sumContainBoott[i] <- np$sumContainBoott[i] + (col$boottL < np$p[i] & col$boottU > np$p[i])
#
np$sumLengthWald[i] <- np$sumLengthWald[i] + (col$waldU-col$waldL)
np$sumLengthAdjWald[i] <- np$sumLengthAdjWald[i] + (col$adjWaldU-col$adjWaldL)
np$sumLengthExact[i] <- np$sumLengthExact[i] + (col$exactU-col$exactL)
np$sumLengthScore[i] <- np$sumLengthScore[i] + (col$scoreU-col$scoreL)
np$sumLengthRaw[i] <- np$sumLengthRaw[i] + (col$rawU-col$rawL)
np$sumLengthBoott[i] <- np$sumLengthBoott[i] + (col$boottU-col$boottL)
}
}
np$propContainWald <- np$sumContainWald/N
np$propContainAdjWald <- np$sumContainAdjWald/N
np$propContainExact <- np$sumContainExact/N
np$propContainScore <- np$sumContainScore/N
np$propContainRaw <- np$sumContainRaw/N
np$propContainBoott <- np$sumContainBoott/N
np$avgLengthWald <- np$sumLengthWald/N
np$avgLengthAdjWald <- np$sumLengthAdjWald/N
np$avgLengthExact <- np$sumLengthExact/N
np$avgLengthScore <- np$sumLengthScore/N
np$avgLengthRaw <- np$sumLengthRaw/N
np$avgLengthBoott <- np$sumLengthBoott/N
#remove columns
np$sumContainWald <-np$sumContainAdjWald <- np$sumContainExact <- np$sumContainScore <- np$sumContainRaw <- np$sumContainBoott <- NULL
np$sumLengthWald <-np$sumLengthAdjWald <- np$sumLengthExact <- np$sumLengthScore <- np$sumLengthRaw <- np$sumLengthBoott <- NULL
par(mfrow = c(2,3))
plot(x = p, y = np$propContainWald[1:length(p)], col = "Blue",
main = paste("Proportion containing with n =", n[1], "\n Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainAdjWald[1:length(p)], col = "Red",
main = paste("Proportion containing with n =", n[1], "\n Adjusted Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainExact[1:length(p)], col = "Orange",
main = paste("Proportion containing with n =", n[1], "\n Exact"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainScore[1:length(p)], col = "Black",
main = paste("Proportion containing with n =", n[1], "\n Score"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainRaw[1:length(p)], col = "Green",
main = paste("Proportion containing with n =", n[1], "\n Raw Percentile Bootstrap"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainBoott[1:length(p)], col = "Purple",      main = paste("Proportion containing with n =", n[1], "\n Bootstrap t"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainWald[(length(p)+1):(2*length(p))], col = "Blue",
main = paste("Proportion containing with n =", n[2], "\n Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainAdjWald[(length(p)+1):(2*length(p))], col = "Red",
main = paste("Proportion containing with n =", n[2], "\n Adjusted Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainExact[(length(p)+1):(2*length(p))], col = "Orange",
main = paste("Proportion containing with n =", n[2], "\n Exact"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainScore[(length(p)+1):(2*length(p))], col = "Black",
main = paste("Proportion containing with n =", n[2], "\n Score"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainRaw[(length(p)+1):(2*length(p))], col = "Green",
main = paste("Proportion containing with n =", n[2], "\n Raw Percentile Bootstrap"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainBoott[(length(p)+1):(2*length(p))], col = "Purple",      main = paste("Proportion containing with n =", n[2], "\n Bootstrap t"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainWald[(2*length(p)+1):(3*length(p))], col = "Blue",
main = paste("Proportion containing with n =", n[3], "\n Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainAdjWald[(2*length(p)+1):(3*length(p))], col = "Red",
main = paste("Proportion containing with n =", n[3], "\n Adjusted Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainExact[(2*length(p)+1):(3*length(p))], col = "Orange",
main = paste("Proportion containing with n =", n[3], "\n Exact"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainScore[(2*length(p)+1):(3*length(p))], col = "Black",
main = paste("Proportion containing with n =", n[3], "\n Score"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainRaw[(2*length(p)+1):(3*length(p))], col = "Green",
main = paste("Proportion containing with n =", n[3], "\n Raw Percentile Bootstrap"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainBoott[(2*length(p)+1):(3*length(p))], col = "Purple",      main = paste("Proportion containing with n =", n[3], "\n Bootstrap t"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
##################################3
#lengths
plot(x = p, y = np$avgLengthWald[1:length(p)], col = "Blue",
main = paste("Average length with n =", n[1]),
ylim = c(0,0.6), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[1:length(p)], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[1:length(p)], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[1:length(p)], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[1:length(p)], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[1:length(p)], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(length(p)+1):(2*length(p))], col = "Blue",
main = paste("Average length with n =", n[2]),
ylim = c(0,0.25), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(length(p)+1):(2*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(length(p)+1):(2*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(length(p)+1):(2*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(length(p)+1):(2*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(length(p)+1):(2*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(2*length(p)+1):(3*length(p))], col = "Blue",
main = paste("Average length with n =", n[3]),
ylim = c(0,0.1), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(2*length(p)+1):(3*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(2*length(p)+1):(3*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(2*length(p)+1):(3*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(2*length(p)+1):(3*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(2*length(p)+1):(3*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
##################################3
#lengths
par(mfrow=c(3,1))
plot(x = p, y = np$avgLengthWald[1:length(p)], col = "Blue",
main = paste("Average length with n =", n[1]),
ylim = c(0,0.6), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[1:length(p)], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[1:length(p)], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[1:length(p)], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[1:length(p)], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[1:length(p)], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(length(p)+1):(2*length(p))], col = "Blue",
main = paste("Average length with n =", n[2]),
ylim = c(0,0.25), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(length(p)+1):(2*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(length(p)+1):(2*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(length(p)+1):(2*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(length(p)+1):(2*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(length(p)+1):(2*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(2*length(p)+1):(3*length(p))], col = "Blue",
main = paste("Average length with n =", n[3]),
ylim = c(0,0.1), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(2*length(p)+1):(3*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(2*length(p)+1):(3*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(2*length(p)+1):(3*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(2*length(p)+1):(3*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(2*length(p)+1):(3*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
par(mfrow=c(3,1))
plot(x = p, y = np$avgLengthWald[1:length(p)], col = "Blue",
main = paste("Average length with n =", n[1]),
ylim = c(0,0.6), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[1:length(p)], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[1:length(p)], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[1:length(p)], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[1:length(p)], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[1:length(p)], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(length(p)+1):(2*length(p))], col = "Blue",
main = paste("Average length with n =", n[2]),
ylim = c(0,0.25), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(length(p)+1):(2*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(length(p)+1):(2*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(length(p)+1):(2*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(length(p)+1):(2*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(length(p)+1):(2*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(2*length(p)+1):(3*length(p))], col = "Blue",
main = paste("Average length with n =", n[3]),
ylim = c(0,0.1), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(2*length(p)+1):(3*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(2*length(p)+1):(3*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(2*length(p)+1):(3*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(2*length(p)+1):(3*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(2*length(p)+1):(3*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
par(mfrow=c(1,3))
plot(x = p, y = np$avgLengthWald[1:length(p)], col = "Blue",
main = paste("Average length with n =", n[1]),
ylim = c(0,0.6), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[1:length(p)], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[1:length(p)], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[1:length(p)], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[1:length(p)], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[1:length(p)], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(length(p)+1):(2*length(p))], col = "Blue",
main = paste("Average length with n =", n[2]),
ylim = c(0,0.25), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(length(p)+1):(2*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(length(p)+1):(2*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(length(p)+1):(2*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(length(p)+1):(2*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(length(p)+1):(2*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(2*length(p)+1):(3*length(p))], col = "Blue",
main = paste("Average length with n =", n[3]),
ylim = c(0,0.1), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(2*length(p)+1):(3*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(2*length(p)+1):(3*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(2*length(p)+1):(3*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(2*length(p)+1):(3*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(2*length(p)+1):(3*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
install.packages("haven")
shiny::runApp()
library(mapview)
help("mapview")
shiny::runApp()
my_map <- filtered_data_map$map_data |>
mapview::mapview(zcol = "estimate", layer.name = "Rent")
my_map@map
my_map@map
runApp()
library(tidyverse)
library(tidycensus)
state_abb <- datasets::state.name
my_key <- "e267f117801b2ef741e54620602b0903c5f4d3c8"
#rent variable name
rent <- "DP04_0142PE"
alabama <- get_acs(variables = rent,
geography = "tract", #geometry = T returns the polygon data and allows for maps easily
geometry = TRUE,
survey = "acs5",
show_call = TRUE,
state = "AL",
key = my_key)
alabama
alabama$estimate
alabama$estimate |> max()
alabama$estimate |> max(na.rm = TRUE)
alabama |>
filter(estimate == 100)
alabama |>
filter(is.na(estimate))
alabama |>
filter(estimate == 0)
alabama |> mapview::mapview(zcol = "estimate", layer.name = "Rent")
alabama <-get_acs(variables = rent,
geography = "tract", #geometry = T returns the polygon data and allows for maps easily
geometry = TRUE,
survey = "acs5",
show_call = TRUE,
state = "AL",
key = my_key,
year = 2022)
alabama |>
filter(estimate == 100)
alabama |>
filter(is.na(estimate))
alabama |>
filter(estimate == 0)
alabama |> mapview::mapview(zcol = "estimate", layer.name = "Rent")
runApp()
input$percentile <= 0
input$percnetile >= 100
mean <- mean(filtered_data()$estimate, na.rm = TRUE)
sd <- sd(filtered_data()$estimate, na.rm = TRUE)
runApp()
mean <- mean(filtered_data()$estimate, na.rm = TRUE)
sd <- sd(filtered_data()$estimate, na.rm = TRUE)
mean
sd
lower <- mean-4*sd
upper <- mean+4*sd
x <- seq(lower, upper, length = 1000)
temp_hist <- hist(filtered_data()$estimate,
freq = FALSE)
largest <- max(temp_hist$density)
hist(filtered_data()$estimate,
freq = FALSE,
xlab= "",
ylab = "Density",
ylim = c(0, largest+0.1*largest),
main = paste0("Rent Distribution with \nMean = ", round(mean, 2), " and S.D. = ", round(sd, 2))
)
lines(x,
dnorm(x, mean = mean, sd = sd),
type = "l"
)
axis(1, at = mean+(-4:4)*sd, labels = -4:4, line = 3)
mtext("Rent and Corresponding Standard Normal Values", side =1, line = 2)
input$adornment
input$adornment
50 <=0
runApp()
library(shinyvalidate)
install.packages("shinyvalidate")
help(req)
library(shinyvalidate)
runApp()
runApp()
runApp()
input$between2
observe(print(input$between2))
runApp()
input$between2
is.null(input$between2)
(value > input$between2)
runApp()
runApp()
runApp()
filtered_data()
filtered_data()$estimate
filtered_data()$estimate < input$less_than
mean(filtered_data()$estimate < input$less_than)
round(mean(filtered_data()$estimate < input$less_than, na.rm = TRUE), 4)
runApp()
runApp()
runApp()
input$prob_type_comp_1st
iv_prob_less_2nd_tab_1st$is_valid()
input$prob_type_comp_1st == "Less Than" & iv_prob_less_2nd_tab_1st$is_valid()
input$less_than_comp_1st
per <- input$less_than_comp_1st
segments(x0 = per, x1 = per, y0 = 0, y1 = dnorm(per, mean = mean, sd = sd), lwd = 2)
xseq <- seq(lower, per, length = 1000)
polygon(x = c(xseq, rev(xseq)), y = c(dnorm(xseq, mean = mean, sd = sd), rep(0, length(xseq))), col = rgb(red = 0.34, blue = 0.139, green = 0.34, alpha = 0.5))
input$between1_comp_1st
per <- input$less_than_comp_1st
per
runApp()
runApp()
runApp()
runApp()
runApp()
state1 <- input$state1
state2 <- input$state2
#separate data
state1_data <- filtered_data_2nd() %>%
filter(state == state1)
state2_data <- filtered_data_2nd() %>%
filter(state == state2)
#means and sds
mean1 <- mean(state1_data$estimate, na.rm = TRUE)
sd1 <- sd(state1_data$estimate, na.rm = TRUE)
mean2 <- mean(state2_data$estimate, na.rm = TRUE)
sd2 <- sd(state2_data$estimate, na.rm = TRUE)
#plotting sequence
lower <- min(mean1-4*sd1, mean2-4*sd2)
upper <- max(mean1+4*sd1, mean2+4*sd2)
x <- seq(lower, upper, length = 5000)
#temp histogram to update max ylim
temp_hist <- hist(state1_data$estimate,
freq = FALSE)
largest <- max(temp_hist$density)
hist(state1_data$estimate,
freq = FALSE,
xlab= "",
ylab = "Density",
ylim = c(0, largest+0.1*largest),
main = paste0("Rent Distribution for ", input$state1, "\nMean = ", round(mean1, 2), " and S.D. = ", round(sd1, 2))
)
lines(x,
dnorm(x, mean = mean1, sd = sd1),
type = "l"
)
axis(1, at = mean1+(-4:4)*sd1, labels = -4:4, line = 3)
mtext("Rent and Corresponding Standard Normal Values", side =1, line = 2)
mean <- mean1
sd <- sd1
input$adornment_comp_1st == "Percentile" & iv_percentile_2nd_tab_1st$is_valid()
input$adornment_comp_1st == "Probability"
input$prob_type_comp_1st == "Less Than" & iv_prob_less_2nd_tab_1st$is_valid()
runApp()
runApp()
runApp()
