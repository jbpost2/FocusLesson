df.loc[i, "measurement"] = df.loc[i, "info"][:7]
return df.drop("info", axis = 1)
#obtain the new state variable
def add_state(county_data):
county_data["state"] = county_data.Area_name.apply(lambda x: x[-2:])
return(county_data)
#obtain the division
def get_division(state):
if state in ["CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT"]:
div = "Division 1"
elif state in ["NEW JERSEY", "NEW YORK", "PENNSYLVANIA"]:
div = "Division 2"
elif state in ["ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN"]:
div = "Division 3"
elif state in ["IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA"]:
div = "Division 4"
elif state in ["DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA", "DISTRICT OF COLUMBIA"]:
div = "Division 5"
elif state in ["ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE"]:
div = "Division 6"
elif state in ["ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS"]:
div = "Division 7"
elif state in ["ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING"]:
div = "Division 8"
elif state in ["ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON"]:
div = "Division 9"
else:
div = "ERROR"
return div
v_get_division = np.vectorize(get_division)
def add_division(non_county_data):
non_county_data["division"] = v_get_division(non_county_data["Area_name"])
return(non_county_data)
#bring in the data frame that has both sets of data, split it, and create these new variables
def split_data(df):
county_index =df.Area_name.apply(lambda x: True if x[-4] == "," else False)
county_data = df[county_index].copy()
non_county_data = df[np.logical_not(county_index)].copy()
#add columns
county_data = add_state(county_data)
non_county_data = add_division(non_county_data)
#return both in a list
return [county_data, non_county_data]
#wrapper function to do it all...
def my_wrapper(url, value_name = "default"):
long_data = read_data_pivot(url, value_name = value_name)
parsed_data = parse_info(long_data)
return split_data(parsed_data)
long_data = read_data_pivot("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv", value_name = "enrollment")
long_data
for index, row in long_data.iterrows():
print(index, row)
for index, row in long_data.iterrows():
print(int(row['info'][-3:-2]))
for index, row in long_data.iterrows():
print(int(row['info'][-3:-1]))
shiny::runApp()
#create state names with abbreviations
state_abb <- datasets::state.name
state_abb
names(state_abb) <- datasets::state.abb
state_abb
#create state names with abbreviations
state_abb <- datasets::state.name
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
library(tidycensus)
state_abb <- datasets::state.name
lapply(X = state_abb[1:2], FUN = get_acs, variables = rent, geography = "tract", geometry = TRUE, survey = "acs5", key = my_key)
#rent variable name
rent <- "DP04_0142PE"
lapply(X = state_abb[1:2], FUN = get_acs, variables = rent, geography = "tract", geometry = TRUE, survey = "acs5", key = my_key)
my_key <- "e267f117801b2ef741e54620602b0903c5f4d3c8"
lapply(X = state_abb[1:2], FUN = get_acs, variables = rent, geography = "tract", geometry = TRUE, survey = "acs5", key = my_key)
lapply(X = state_abb[1:2], FUN = function(x){
get_acs(variables = rent,
geography = "tract", #geometry = T returns the polygon data and allows for maps easily
geometry = TRUE,
survey = "acs5",
show_call = TRUE,
state = x,
key = my_key)
})
all_rent <- lapply(X = state_abb[1:2], FUN = function(x){
get_acs(variables = rent,
geography = "tract", #geometry = T returns the polygon data and allows for maps easily
geometry = TRUE,
survey = "acs5",
show_call = TRUE,
state = x,
key = my_key)
})
all_rent <- lapply(X = state_abb, FUN = function(x){
get_acs(variables = rent,
geography = "tract", #geometry = T returns the polygon data and allows for maps easily
geometry = TRUE,
survey = "acs5",
show_call = TRUE,
state = x,
key = my_key)
})
saveRDS(al_rent, file = 'rent.rds')
saveRDS(all_rent, file = 'rent.rds')
runApp()
all_rent[[1]]
all_rent[[1]]$NAME
all_rent$alabama
str(all_rent, max.level = 1)
names(all_rent)
names(all_rent)<- state_abb
all_rent
names(all_rent)
all_rent$Alabama
all_rent$`North Carolina`
saveRDS(all_rent, file = 'rent.rds')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
N <- 2000
B <- 200
n <- c(15, 100, 500)
p <- seq(from = 0.01, to = 0.99, by = 0.01)
set.seed(100)
#find wald interval
waldCI <- function(y, n, alpha = 0.05){
c(y/n - qnorm(1-alpha/2)*sqrt(((y/n)*(1-y/n))/n), y/n + qnorm(1-alpha/2)*sqrt(((y/n)*(1-y/n))/n))
}
#find adjusted Wald
adjWaldCI <- function(y, n, alpha = 0.05){
n2 <- n+4
y2 <- y+2
c(y2/n2 - qnorm(1-alpha/2)*sqrt(((y2/n2)*(1-y2/n2))/n2), y2/n2 + qnorm(1-alpha/2)*sqrt(((y2/n2)*(1-y2/n2))/n2))
}
#find Clopper-Pearson
exactCI <- function(y, n, alpha = 0.05){
if(y == 0){
c(0,
(1+(n-y)/((y+1)*qf(alpha/2, df1 = 2*(y+1), df2 = 2*(n-y))))^(-1))
} else if (y == n){
c((1+(n-y+1)/(y*qf(1-alpha/2, df1 = 2*y, df2 = 2*(n-y+1))))^(-1),
1)
} else {
c(
(1+(n-y+1)/(y*qf(alpha/2, df1 = 2*y, df2 = 2*(n-y+1))))^(-1),
(1+(n-y)/((y+1)*qf(1-alpha/2, df1 = 2*(y+1), df2 = 2*(n-y))))^(-1)
)
}
}
#find Score
scoreCI <- function(y, n, alpha = 0.05){
c((y/n+qnorm(1-alpha/2)^2/(2*n)-qnorm(1-alpha/2)*sqrt((y/n*(1-y/n)+qnorm(1-alpha/2)^2/(4*n))/n))/(1+qnorm(1-alpha/2)^2/n), (y/n+qnorm(1-alpha/2)^2/(2*n)+qnorm(1-alpha/2)*sqrt((y/n*(1-y/n)+qnorm(1-alpha/2)^2/(4*n))/n))/(1+qnorm(1-alpha/2)^2/n))
}
#both bootstrap intervals at once
bootInts <- function(n, y, alpha = 0.05, B = 200){
if (y == 0) {
return(list(raw = c(0,0), t = c(0,0)))
} else if (y == n){
return(list(raw = c(1,1), t = c(1,1)))
} else {
bootMLEs <- rbinom(n = B, size = n, prob = y/n)/n
bootTs <- (bootMLEs - y/n)/sqrt(bootMLEs*(1-bootMLEs)/n)
bootTs <- ifelse(bootTs== Inf | bootTs == -Inf, NA, bootTs)
t <- c(y/n - quantile(bootTs, 1-alpha/2, na.rm = TRUE)*sqrt(y/n*(1-y/n)/n),
y/n - quantile(bootTs, alpha/2, na.rm = TRUE)*sqrt(y/n*(1-y/n)/n))
return(list(raw = quantile(bootMLEs, c(alpha/2, 1-alpha/2)),
t = t
))
}
}
#dataframe with all combos of n and p
np <- data.frame(n = rep(n, each = length(p)), p = rep(p, 3))
#generate data - each column represents N observations from the n - p combo
samples <- apply(X = np, MARGIN = 1, FUN = function(x){
rbinom(n = N, size = x[1], prob = x[2])
})
#for a given column we want to calculate the intervals using each method
#Note this part is just to help explain what is going on with my code
#for a given column, find all the intervals (across rows 1:N)
temp <- sapply(1:N, FUN = function(x){
#get sample size from np dataframe
wald <- waldCI(samples[x, 1], n = np[1, 1])
adjWald <- adjWaldCI(samples[x, 1], n = np[1, 1])
exact <- exactCI(samples[x, 1], n = np[1, 1])
score <- scoreCI(samples[x, 1], n = np[1, 1])
boot <- bootInts(samples[x, 1], n = np[1, 1])
return(list(waldL = wald[1], waldU = wald[2],
adjWaldL = adjWald[1], adjWaldU = adjWald[2],
exactL = exact[1], exactU = exact[2],
scoreL = score[1], scoreU = score[2],
rawL = boot$raw[1], rawU = boot$raw[2],
boottL = boot$t[1], boottU = boot$t[2]))
})
#each column of the above output has the six intervals in it
#now we want to do that process to each column, 1:dim(samples)[2]
allIntervals <- lapply(1:dim(samples)[2],
FUN = function(u){
sapply(X=1:N, FUN = function(x){
#get sample size from np dataframe
wald <- waldCI(samples[x, u], n = np[u, 1])
adjWald <- adjWaldCI(samples[x, u], n = np[u, 1])
exact <- exactCI(samples[x, u], n = np[u, 1])
score <- scoreCI(samples[x, u], n = np[u, 1])
boot <- bootInts(samples[x, u], n = np[u, 1])
return(list(waldL = wald[1], waldU = wald[2],
adjWaldL = adjWald[1], adjWaldU = adjWald[2],
exactL = exact[1], exactU = exact[2],
scoreL = score[1], scoreU = score[2],
rawL = boot$raw[1], rawU = boot$raw[2],
boottL = boot$t[1], boottU = boot$t[2]))
})
})
#give list elements names to make them easier to understand
names(allIntervals) <- apply(X = np, MARGIN = 1,
FUN = function(x){paste0("n",x[1],"p",x[2])})
#now get summaries about each method
#add a new column to the np dataframe with the proportions
np$sumContainWald <- np$sumLengthWald <- vector(mode = "numeric", length = dim(samples)[2])
np$sumContainAdjWald <- np$sumLengthAdjWald <- vector(mode = "numeric", length = dim(samples)[2])
np$sumContainExact <- np$sumLengthExact <- vector(mode = "numeric", length = dim(samples)[2])
np$sumContainScore <- np$sumLengthScore <- vector(mode = "numeric", length = dim(samples)[2])
np$sumContainRaw <- np$sumLengthRaw <- vector(mode = "numeric", length = dim(samples)[2])
np$sumContainBoott <- np$sumLengthBoott <- vector(mode = "numeric", length = dim(samples)[2])
for(i in 1:dim(samples)[2]){
for(j in 1:N){
col <- allIntervals[[i]][,j]
np$sumContainWald[i] <- np$sumContainWald[i] + (col$waldL < np$p[i] & col$waldU > np$p[i])
np$sumContainAdjWald[i] <- np$sumContainAdjWald[i] + (col$adjWaldL < np$p[i] & col$adjWaldU > np$p[i])
np$sumContainExact[i] <- np$sumContainExact[i] + (col$exactL < np$p[i] & col$exactU > np$p[i])
np$sumContainScore[i] <- np$sumContainScore[i] + (col$scoreL < np$p[i] & col$scoreU > np$p[i])
np$sumContainRaw[i] <- np$sumContainRaw[i] + (col$rawL < np$p[i] & col$rawU > np$p[i])
np$sumContainBoott[i] <- np$sumContainBoott[i] + (col$boottL < np$p[i] & col$boottU > np$p[i])
#
np$sumLengthWald[i] <- np$sumLengthWald[i] + (col$waldU-col$waldL)
np$sumLengthAdjWald[i] <- np$sumLengthAdjWald[i] + (col$adjWaldU-col$adjWaldL)
np$sumLengthExact[i] <- np$sumLengthExact[i] + (col$exactU-col$exactL)
np$sumLengthScore[i] <- np$sumLengthScore[i] + (col$scoreU-col$scoreL)
np$sumLengthRaw[i] <- np$sumLengthRaw[i] + (col$rawU-col$rawL)
np$sumLengthBoott[i] <- np$sumLengthBoott[i] + (col$boottU-col$boottL)
}
}
np$propContainWald <- np$sumContainWald/N
np$propContainAdjWald <- np$sumContainAdjWald/N
np$propContainExact <- np$sumContainExact/N
np$propContainScore <- np$sumContainScore/N
np$propContainRaw <- np$sumContainRaw/N
np$propContainBoott <- np$sumContainBoott/N
np$avgLengthWald <- np$sumLengthWald/N
np$avgLengthAdjWald <- np$sumLengthAdjWald/N
np$avgLengthExact <- np$sumLengthExact/N
np$avgLengthScore <- np$sumLengthScore/N
np$avgLengthRaw <- np$sumLengthRaw/N
np$avgLengthBoott <- np$sumLengthBoott/N
#remove columns
np$sumContainWald <-np$sumContainAdjWald <- np$sumContainExact <- np$sumContainScore <- np$sumContainRaw <- np$sumContainBoott <- NULL
np$sumLengthWald <-np$sumLengthAdjWald <- np$sumLengthExact <- np$sumLengthScore <- np$sumLengthRaw <- np$sumLengthBoott <- NULL
par(mfrow = c(2,3))
plot(x = p, y = np$propContainWald[1:length(p)], col = "Blue",
main = paste("Proportion containing with n =", n[1], "\n Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainAdjWald[1:length(p)], col = "Red",
main = paste("Proportion containing with n =", n[1], "\n Adjusted Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainExact[1:length(p)], col = "Orange",
main = paste("Proportion containing with n =", n[1], "\n Exact"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainScore[1:length(p)], col = "Black",
main = paste("Proportion containing with n =", n[1], "\n Score"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainRaw[1:length(p)], col = "Green",
main = paste("Proportion containing with n =", n[1], "\n Raw Percentile Bootstrap"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainBoott[1:length(p)], col = "Purple",      main = paste("Proportion containing with n =", n[1], "\n Bootstrap t"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainWald[(length(p)+1):(2*length(p))], col = "Blue",
main = paste("Proportion containing with n =", n[2], "\n Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainAdjWald[(length(p)+1):(2*length(p))], col = "Red",
main = paste("Proportion containing with n =", n[2], "\n Adjusted Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainExact[(length(p)+1):(2*length(p))], col = "Orange",
main = paste("Proportion containing with n =", n[2], "\n Exact"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainScore[(length(p)+1):(2*length(p))], col = "Black",
main = paste("Proportion containing with n =", n[2], "\n Score"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainRaw[(length(p)+1):(2*length(p))], col = "Green",
main = paste("Proportion containing with n =", n[2], "\n Raw Percentile Bootstrap"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainBoott[(length(p)+1):(2*length(p))], col = "Purple",      main = paste("Proportion containing with n =", n[2], "\n Bootstrap t"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainWald[(2*length(p)+1):(3*length(p))], col = "Blue",
main = paste("Proportion containing with n =", n[3], "\n Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainAdjWald[(2*length(p)+1):(3*length(p))], col = "Red",
main = paste("Proportion containing with n =", n[3], "\n Adjusted Wald"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainExact[(2*length(p)+1):(3*length(p))], col = "Orange",
main = paste("Proportion containing with n =", n[3], "\n Exact"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainScore[(2*length(p)+1):(3*length(p))], col = "Black",
main = paste("Proportion containing with n =", n[3], "\n Score"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainRaw[(2*length(p)+1):(3*length(p))], col = "Green",
main = paste("Proportion containing with n =", n[3], "\n Raw Percentile Bootstrap"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
plot(x = p, y = np$propContainBoott[(2*length(p)+1):(3*length(p))], col = "Purple",      main = paste("Proportion containing with n =", n[3], "\n Bootstrap t"),
ylim = c(0,1), type = "l", lwd = 2, ylab = "Proportion")
abline(h = 0.95)
##################################3
#lengths
plot(x = p, y = np$avgLengthWald[1:length(p)], col = "Blue",
main = paste("Average length with n =", n[1]),
ylim = c(0,0.6), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[1:length(p)], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[1:length(p)], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[1:length(p)], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[1:length(p)], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[1:length(p)], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(length(p)+1):(2*length(p))], col = "Blue",
main = paste("Average length with n =", n[2]),
ylim = c(0,0.25), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(length(p)+1):(2*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(length(p)+1):(2*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(length(p)+1):(2*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(length(p)+1):(2*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(length(p)+1):(2*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(2*length(p)+1):(3*length(p))], col = "Blue",
main = paste("Average length with n =", n[3]),
ylim = c(0,0.1), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(2*length(p)+1):(3*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(2*length(p)+1):(3*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(2*length(p)+1):(3*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(2*length(p)+1):(3*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(2*length(p)+1):(3*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
##################################3
#lengths
par(mfrow=c(3,1))
plot(x = p, y = np$avgLengthWald[1:length(p)], col = "Blue",
main = paste("Average length with n =", n[1]),
ylim = c(0,0.6), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[1:length(p)], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[1:length(p)], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[1:length(p)], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[1:length(p)], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[1:length(p)], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(length(p)+1):(2*length(p))], col = "Blue",
main = paste("Average length with n =", n[2]),
ylim = c(0,0.25), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(length(p)+1):(2*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(length(p)+1):(2*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(length(p)+1):(2*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(length(p)+1):(2*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(length(p)+1):(2*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(2*length(p)+1):(3*length(p))], col = "Blue",
main = paste("Average length with n =", n[3]),
ylim = c(0,0.1), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(2*length(p)+1):(3*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(2*length(p)+1):(3*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(2*length(p)+1):(3*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(2*length(p)+1):(3*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(2*length(p)+1):(3*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
par(mfrow=c(3,1))
plot(x = p, y = np$avgLengthWald[1:length(p)], col = "Blue",
main = paste("Average length with n =", n[1]),
ylim = c(0,0.6), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[1:length(p)], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[1:length(p)], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[1:length(p)], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[1:length(p)], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[1:length(p)], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(length(p)+1):(2*length(p))], col = "Blue",
main = paste("Average length with n =", n[2]),
ylim = c(0,0.25), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(length(p)+1):(2*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(length(p)+1):(2*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(length(p)+1):(2*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(length(p)+1):(2*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(length(p)+1):(2*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(2*length(p)+1):(3*length(p))], col = "Blue",
main = paste("Average length with n =", n[3]),
ylim = c(0,0.1), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(2*length(p)+1):(3*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(2*length(p)+1):(3*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(2*length(p)+1):(3*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(2*length(p)+1):(3*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(2*length(p)+1):(3*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
par(mfrow=c(1,3))
plot(x = p, y = np$avgLengthWald[1:length(p)], col = "Blue",
main = paste("Average length with n =", n[1]),
ylim = c(0,0.6), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[1:length(p)], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[1:length(p)], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[1:length(p)], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[1:length(p)], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[1:length(p)], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(length(p)+1):(2*length(p))], col = "Blue",
main = paste("Average length with n =", n[2]),
ylim = c(0,0.25), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(length(p)+1):(2*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(length(p)+1):(2*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(length(p)+1):(2*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(length(p)+1):(2*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(length(p)+1):(2*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
plot(x = p, y = np$avgLengthWald[(2*length(p)+1):(3*length(p))], col = "Blue",
main = paste("Average length with n =", n[3]),
ylim = c(0,0.1), type = "l", lwd = 2, ylab = "Proportion")
lines(x = p, y = np$avgLengthAdjWald[(2*length(p)+1):(3*length(p))], col = "Red",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthExact[(2*length(p)+1):(3*length(p))], col = "Orange",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthScore[(2*length(p)+1):(3*length(p))], col = "Black",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthRaw[(2*length(p)+1):(3*length(p))], col = "Green",
type = "l", lwd = 2)
lines(x = p, y = np$avgLengthBoott[(2*length(p)+1):(3*length(p))], col = "Purple",
type = "l", lwd = 2)
legend(x = "topright", legend=c("Wald", "AdjWald", "Exact", "Score", "Raw", "Boott"), col = c("Blue", "Red", "Orange", "Black", "Green", "Purple"), lwd = 2)
